// 1 класс (сущность) ВСЕГДА должен решать только одну задачу, и у него единая зона ответственности. 
// Если один класс будет выполнять множество обязанностей, то тогда мы будем следовать антипатерну god's object (объект бога).

// Программные сущности должны быть открыты для расширения, но закрыты для изменения. Изменять уже существующий, работающий код
// это почти всегда (но не всегда) плохо, потому что этот код уже протестирован, он работает и проблем с ним нет. Если мы его изменяем, 
// то необходимо делать регрессию (ретесты).
//
// Сущности, которые используют родительский тип должны точно так же работать и с дочерними классами и при этом ничего не должно
// ломаться в логике работы программы. То есть наследуемый класс должен дополнять, а не замещать поведения базового класса.

// Программные сущности не должны зависеть от методов, которые они не используют. Этот принцип во многом пересекается с первым.
// Он гласит, что основная наша задача разбивать большие интерфейсы (сущности) на более маленькие и узкоспециализированные, решающие
// одну задачу.
// -- избавляем программные сущности от методов, которые они не используют 
// -- получаем более предсказуемую работу
// -- код становится менее связанным

// Модули высокого уровня не должны зависеть от модулей более низкого уровня. Все они должны зависеть от абстракций, 
// а абстракции в это время не должны зависить от деталей, в свою же очередь детали должны зависеть от абстракций